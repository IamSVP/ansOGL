cmake_minimum_required (VERSION 3.2)
project(ansOGL)

find_package(OpenGL REQUIRED)




SET(ansOGL_MAJOR_VERSION 0)
SET(ansOGL_MINOR_VERSION 0)
SET(ansOGL_PATCH_VERSION 0)
SET(ansOGL_VERSION ${OculusRenderer_MAJOR_VERSION}.${OculusRenderer_MINOR_VERSION}.${OculusRenderer_PATCH_VERSION})
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

OPTION(TREAT_WARNINGS_AS_ERRORS "Treat compiler warnings as errors. We use the highest warnings levels for compilers." OFF)

add_definitions(
	-DTW_STATIC
	-DTW_NO_LIB_PRAGMA
	-DGLEW_STATIC
	-D_CRT_SECURE_NO_WARNINGS
)
SET(CMAKE_COLOR_MAKEFILE ON)
IF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -fms-extensions")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fms-extensions")

ENDIF(MSVC)

IF(TREAT_WARNINGS_AS_ERRORS)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
  ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
  ENDIF(MSVC)
ENDIF(TREAT_WARNINGS_AS_ERRORS)

SET(CMAKE_CXX_STANDARD 11)

add_subdirectory(googletest)
add_subdirectory(external)
add_subdirectory(ans_ogl)
add_subdirectory(ogl)


